name: Deploy on Prod

on:
  push:
    branches: ["main"]

jobs:
  env:
    uses: ./.github/workflows/build-env.yaml

  build:
    needs: env
    runs-on: ubuntu-latest
    steps:
      - name: Download env artifact
        uses: actions/download-artifact@v4
        with:
          name: env

      - name: Import env
        shell: bash
        run: |
          while read env; do
            echo $env >> $GITHUB_ENV
          done <<< $(cat .env)

      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Build and push Docker image
        run: |
          echo "POSTGRES_CONNECTION_URI=${{ secrets.POSTGRES_CONNECTION_URI }}" > environment.d
          echo "RIOT_TOKEN=${{ secrets.RIOT_TOKEN }}" >> environment.d
          echo "ORIGIN=${{ secrets.ORIGIN }}" >> environment.d
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> environment.d
          echo "PROVIDER_ID=${{ secrets.PROVIDER_ID }}" >> environment.d
          docker buildx build --push --tag lblcs/${{ env.APP }}:latest .
          docker tag lblcs/${{ env.APP }}:latest lblcs/${{ env.APP }}:latest
          docker tag lblcs/${{ env.APP }}:latest lblcs/${{ env.APP }}:${{ env.VERSION }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download env artifact
        uses: actions/download-artifact@v4
        with:
          name: env

      - name: Import env
        shell: bash
        run: |
          while read env; do
            echo $env >> $GITHUB_ENV
          done <<< $( cat .env)

      - name: Execute docker compose on prod server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd docker/lblcs
            docker-compose -f ${{ env.APP }}.yaml down
            docker-compose -f ${{ env.APP }}.yaml pull
            docker-compose -f ${{ env.APP }}.yaml up -d
